// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging.proto

#ifndef PROTOBUF_logging_2eproto__INCLUDED
#define PROTOBUF_logging_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Logging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_logging_2eproto();
void protobuf_AssignDesc_logging_2eproto();
void protobuf_ShutdownFile_logging_2eproto();

class Velocities;
class ReceivedData;
class RobotPose;
class SystemData;
class LoggingData;
class Log;

// ===================================================================

class Velocities : public ::google::protobuf::Message {
 public:
  Velocities();
  virtual ~Velocities();
  
  Velocities(const Velocities& from);
  
  inline Velocities& operator=(const Velocities& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Velocities& default_instance();
  
  void Swap(Velocities* other);
  
  // implements Message ----------------------------------------------
  
  Velocities* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Velocities& from);
  void MergeFrom(const Velocities& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 vl = 1;
  inline bool has_vl() const;
  inline void clear_vl();
  static const int kVlFieldNumber = 1;
  inline ::google::protobuf::int32 vl() const;
  inline void set_vl(::google::protobuf::int32 value);
  
  // required int32 vr = 2;
  inline bool has_vr() const;
  inline void clear_vr();
  static const int kVrFieldNumber = 2;
  inline ::google::protobuf::int32 vr() const;
  inline void set_vr(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Logging.Velocities)
 private:
  inline void set_has_vl();
  inline void clear_has_vl();
  inline void set_has_vr();
  inline void clear_has_vr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 vl_;
  ::google::protobuf::int32 vr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static Velocities* default_instance_;
};
// -------------------------------------------------------------------

class ReceivedData : public ::google::protobuf::Message {
 public:
  ReceivedData();
  virtual ~ReceivedData();
  
  ReceivedData(const ReceivedData& from);
  
  inline ReceivedData& operator=(const ReceivedData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivedData& default_instance();
  
  void Swap(ReceivedData* other);
  
  // implements Message ----------------------------------------------
  
  ReceivedData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceivedData& from);
  void MergeFrom(const ReceivedData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);
  
  // required .Logging.Velocities target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::Logging::Velocities& target() const;
  inline ::Logging::Velocities* mutable_target();
  inline ::Logging::Velocities* release_target();
  
  // required .Logging.Velocities measured = 4;
  inline bool has_measured() const;
  inline void clear_measured();
  static const int kMeasuredFieldNumber = 4;
  inline const ::Logging::Velocities& measured() const;
  inline ::Logging::Velocities* mutable_measured();
  inline ::Logging::Velocities* release_measured();
  
  // @@protoc_insertion_point(class_scope:Logging.ReceivedData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_measured();
  inline void clear_has_measured();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ts_;
  ::Logging::Velocities* target_;
  ::Logging::Velocities* measured_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static ReceivedData* default_instance_;
};
// -------------------------------------------------------------------

class RobotPose : public ::google::protobuf::Message {
 public:
  RobotPose();
  virtual ~RobotPose();
  
  RobotPose(const RobotPose& from);
  
  inline RobotPose& operator=(const RobotPose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotPose& default_instance();
  
  void Swap(RobotPose* other);
  
  // implements Message ----------------------------------------------
  
  RobotPose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotPose& from);
  void MergeFrom(const RobotPose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required float theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 3;
  inline float theta() const;
  inline void set_theta(float value);
  
  // @@protoc_insertion_point(class_scope:Logging.RobotPose)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_theta();
  inline void clear_has_theta();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  float theta_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static RobotPose* default_instance_;
};
// -------------------------------------------------------------------

class SystemData : public ::google::protobuf::Message {
 public:
  SystemData();
  virtual ~SystemData();
  
  SystemData(const SystemData& from);
  
  inline SystemData& operator=(const SystemData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemData& default_instance();
  
  void Swap(SystemData* other);
  
  // implements Message ----------------------------------------------
  
  SystemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemData& from);
  void MergeFrom(const SystemData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);
  
  // required float timeMs = 3;
  inline bool has_timems() const;
  inline void clear_timems();
  static const int kTimeMsFieldNumber = 3;
  inline float timems() const;
  inline void set_timems(float value);
  
  // required .Logging.Velocities sent = 4;
  inline bool has_sent() const;
  inline void clear_sent();
  static const int kSentFieldNumber = 4;
  inline const ::Logging::Velocities& sent() const;
  inline ::Logging::Velocities* mutable_sent();
  inline ::Logging::Velocities* release_sent();
  
  // required .Logging.Velocities vision = 5;
  inline bool has_vision() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 5;
  inline const ::Logging::Velocities& vision() const;
  inline ::Logging::Velocities* mutable_vision();
  inline ::Logging::Velocities* release_vision();
  
  // required .Logging.RobotPose pose = 6;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 6;
  inline const ::Logging::RobotPose& pose() const;
  inline ::Logging::RobotPose* mutable_pose();
  inline ::Logging::RobotPose* release_pose();
  
  // @@protoc_insertion_point(class_scope:Logging.SystemData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_timems();
  inline void clear_has_timems();
  inline void set_has_sent();
  inline void clear_has_sent();
  inline void set_has_vision();
  inline void clear_has_vision();
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ts_;
  ::Logging::Velocities* sent_;
  ::Logging::Velocities* vision_;
  ::Logging::RobotPose* pose_;
  float timems_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static SystemData* default_instance_;
};
// -------------------------------------------------------------------

class LoggingData : public ::google::protobuf::Message {
 public:
  LoggingData();
  virtual ~LoggingData();
  
  LoggingData(const LoggingData& from);
  
  inline LoggingData& operator=(const LoggingData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggingData& default_instance();
  
  void Swap(LoggingData* other);
  
  // implements Message ----------------------------------------------
  
  LoggingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoggingData& from);
  void MergeFrom(const LoggingData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Logging.SystemData sysData = 1;
  inline bool has_sysdata() const;
  inline void clear_sysdata();
  static const int kSysDataFieldNumber = 1;
  inline const ::Logging::SystemData& sysdata() const;
  inline ::Logging::SystemData* mutable_sysdata();
  inline ::Logging::SystemData* release_sysdata();
  
  // optional .Logging.ReceivedData recvData = 2;
  inline bool has_recvdata() const;
  inline void clear_recvdata();
  static const int kRecvDataFieldNumber = 2;
  inline const ::Logging::ReceivedData& recvdata() const;
  inline ::Logging::ReceivedData* mutable_recvdata();
  inline ::Logging::ReceivedData* release_recvdata();
  
  // @@protoc_insertion_point(class_scope:Logging.LoggingData)
 private:
  inline void set_has_sysdata();
  inline void clear_has_sysdata();
  inline void set_has_recvdata();
  inline void clear_has_recvdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Logging::SystemData* sysdata_;
  ::Logging::ReceivedData* recvdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static LoggingData* default_instance_;
};
// -------------------------------------------------------------------

class Log : public ::google::protobuf::Message {
 public:
  Log();
  virtual ~Log();
  
  Log(const Log& from);
  
  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Log& default_instance();
  
  void Swap(Log* other);
  
  // implements Message ----------------------------------------------
  
  Log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Logging.LoggingData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Logging::LoggingData& data(int index) const;
  inline ::Logging::LoggingData* mutable_data(int index);
  inline ::Logging::LoggingData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Logging::LoggingData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Logging::LoggingData >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:Logging.Log)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Logging::LoggingData > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_logging_2eproto();
  friend void protobuf_AssignDesc_logging_2eproto();
  friend void protobuf_ShutdownFile_logging_2eproto();
  
  void InitAsDefaultInstance();
  static Log* default_instance_;
};
// ===================================================================


// ===================================================================

// Velocities

// required int32 vl = 1;
inline bool Velocities::has_vl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Velocities::set_has_vl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Velocities::clear_has_vl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Velocities::clear_vl() {
  vl_ = 0;
  clear_has_vl();
}
inline ::google::protobuf::int32 Velocities::vl() const {
  return vl_;
}
inline void Velocities::set_vl(::google::protobuf::int32 value) {
  set_has_vl();
  vl_ = value;
}

// required int32 vr = 2;
inline bool Velocities::has_vr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Velocities::set_has_vr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Velocities::clear_has_vr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Velocities::clear_vr() {
  vr_ = 0;
  clear_has_vr();
}
inline ::google::protobuf::int32 Velocities::vr() const {
  return vr_;
}
inline void Velocities::set_vr(::google::protobuf::int32 value) {
  set_has_vr();
  vr_ = value;
}

// -------------------------------------------------------------------

// ReceivedData

// required int32 id = 1;
inline bool ReceivedData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceivedData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceivedData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceivedData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReceivedData::id() const {
  return id_;
}
inline void ReceivedData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 ts = 2;
inline bool ReceivedData::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceivedData::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceivedData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceivedData::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 ReceivedData::ts() const {
  return ts_;
}
inline void ReceivedData::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// required .Logging.Velocities target = 3;
inline bool ReceivedData::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceivedData::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceivedData::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceivedData::clear_target() {
  if (target_ != NULL) target_->::Logging::Velocities::Clear();
  clear_has_target();
}
inline const ::Logging::Velocities& ReceivedData::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Logging::Velocities* ReceivedData::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Logging::Velocities;
  return target_;
}
inline ::Logging::Velocities* ReceivedData::release_target() {
  clear_has_target();
  ::Logging::Velocities* temp = target_;
  target_ = NULL;
  return temp;
}

// required .Logging.Velocities measured = 4;
inline bool ReceivedData::has_measured() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceivedData::set_has_measured() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceivedData::clear_has_measured() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceivedData::clear_measured() {
  if (measured_ != NULL) measured_->::Logging::Velocities::Clear();
  clear_has_measured();
}
inline const ::Logging::Velocities& ReceivedData::measured() const {
  return measured_ != NULL ? *measured_ : *default_instance_->measured_;
}
inline ::Logging::Velocities* ReceivedData::mutable_measured() {
  set_has_measured();
  if (measured_ == NULL) measured_ = new ::Logging::Velocities;
  return measured_;
}
inline ::Logging::Velocities* ReceivedData::release_measured() {
  clear_has_measured();
  ::Logging::Velocities* temp = measured_;
  measured_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RobotPose

// required int32 x = 1;
inline bool RobotPose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotPose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotPose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotPose::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 RobotPose::x() const {
  return x_;
}
inline void RobotPose::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool RobotPose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotPose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotPose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotPose::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 RobotPose::y() const {
  return y_;
}
inline void RobotPose::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required float theta = 3;
inline bool RobotPose::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotPose::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotPose::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotPose::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline float RobotPose::theta() const {
  return theta_;
}
inline void RobotPose::set_theta(float value) {
  set_has_theta();
  theta_ = value;
}

// -------------------------------------------------------------------

// SystemData

// required int32 id = 1;
inline bool SystemData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SystemData::id() const {
  return id_;
}
inline void SystemData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 ts = 2;
inline bool SystemData::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemData::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemData::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemData::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 SystemData::ts() const {
  return ts_;
}
inline void SystemData::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// required float timeMs = 3;
inline bool SystemData::has_timems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemData::set_has_timems() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemData::clear_has_timems() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemData::clear_timems() {
  timems_ = 0;
  clear_has_timems();
}
inline float SystemData::timems() const {
  return timems_;
}
inline void SystemData::set_timems(float value) {
  set_has_timems();
  timems_ = value;
}

// required .Logging.Velocities sent = 4;
inline bool SystemData::has_sent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemData::set_has_sent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemData::clear_has_sent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemData::clear_sent() {
  if (sent_ != NULL) sent_->::Logging::Velocities::Clear();
  clear_has_sent();
}
inline const ::Logging::Velocities& SystemData::sent() const {
  return sent_ != NULL ? *sent_ : *default_instance_->sent_;
}
inline ::Logging::Velocities* SystemData::mutable_sent() {
  set_has_sent();
  if (sent_ == NULL) sent_ = new ::Logging::Velocities;
  return sent_;
}
inline ::Logging::Velocities* SystemData::release_sent() {
  clear_has_sent();
  ::Logging::Velocities* temp = sent_;
  sent_ = NULL;
  return temp;
}

// required .Logging.Velocities vision = 5;
inline bool SystemData::has_vision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemData::set_has_vision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemData::clear_has_vision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemData::clear_vision() {
  if (vision_ != NULL) vision_->::Logging::Velocities::Clear();
  clear_has_vision();
}
inline const ::Logging::Velocities& SystemData::vision() const {
  return vision_ != NULL ? *vision_ : *default_instance_->vision_;
}
inline ::Logging::Velocities* SystemData::mutable_vision() {
  set_has_vision();
  if (vision_ == NULL) vision_ = new ::Logging::Velocities;
  return vision_;
}
inline ::Logging::Velocities* SystemData::release_vision() {
  clear_has_vision();
  ::Logging::Velocities* temp = vision_;
  vision_ = NULL;
  return temp;
}

// required .Logging.RobotPose pose = 6;
inline bool SystemData::has_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemData::set_has_pose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemData::clear_has_pose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemData::clear_pose() {
  if (pose_ != NULL) pose_->::Logging::RobotPose::Clear();
  clear_has_pose();
}
inline const ::Logging::RobotPose& SystemData::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::Logging::RobotPose* SystemData::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::Logging::RobotPose;
  return pose_;
}
inline ::Logging::RobotPose* SystemData::release_pose() {
  clear_has_pose();
  ::Logging::RobotPose* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// LoggingData

// required .Logging.SystemData sysData = 1;
inline bool LoggingData::has_sysdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoggingData::set_has_sysdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoggingData::clear_has_sysdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoggingData::clear_sysdata() {
  if (sysdata_ != NULL) sysdata_->::Logging::SystemData::Clear();
  clear_has_sysdata();
}
inline const ::Logging::SystemData& LoggingData::sysdata() const {
  return sysdata_ != NULL ? *sysdata_ : *default_instance_->sysdata_;
}
inline ::Logging::SystemData* LoggingData::mutable_sysdata() {
  set_has_sysdata();
  if (sysdata_ == NULL) sysdata_ = new ::Logging::SystemData;
  return sysdata_;
}
inline ::Logging::SystemData* LoggingData::release_sysdata() {
  clear_has_sysdata();
  ::Logging::SystemData* temp = sysdata_;
  sysdata_ = NULL;
  return temp;
}

// optional .Logging.ReceivedData recvData = 2;
inline bool LoggingData::has_recvdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoggingData::set_has_recvdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoggingData::clear_has_recvdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoggingData::clear_recvdata() {
  if (recvdata_ != NULL) recvdata_->::Logging::ReceivedData::Clear();
  clear_has_recvdata();
}
inline const ::Logging::ReceivedData& LoggingData::recvdata() const {
  return recvdata_ != NULL ? *recvdata_ : *default_instance_->recvdata_;
}
inline ::Logging::ReceivedData* LoggingData::mutable_recvdata() {
  set_has_recvdata();
  if (recvdata_ == NULL) recvdata_ = new ::Logging::ReceivedData;
  return recvdata_;
}
inline ::Logging::ReceivedData* LoggingData::release_recvdata() {
  clear_has_recvdata();
  ::Logging::ReceivedData* temp = recvdata_;
  recvdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Log

// repeated .Logging.LoggingData data = 1;
inline int Log::data_size() const {
  return data_.size();
}
inline void Log::clear_data() {
  data_.Clear();
}
inline const ::Logging::LoggingData& Log::data(int index) const {
  return data_.Get(index);
}
inline ::Logging::LoggingData* Log::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Logging::LoggingData* Log::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Logging::LoggingData >&
Log::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Logging::LoggingData >*
Log::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Logging

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logging_2eproto__INCLUDED
