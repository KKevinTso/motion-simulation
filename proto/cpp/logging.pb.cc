// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Logging {

namespace {

const ::google::protobuf::Descriptor* Velocities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Velocities_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceivedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceivedData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPose_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoggingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Log_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logging_2eproto() {
  protobuf_AddDesc_logging_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logging.proto");
  GOOGLE_CHECK(file != NULL);
  Velocities_descriptor_ = file->message_type(0);
  static const int Velocities_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocities, vl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocities, vr_),
  };
  Velocities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Velocities_descriptor_,
      Velocities::default_instance_,
      Velocities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Velocities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Velocities));
  ReceivedData_descriptor_ = file->message_type(1);
  static const int ReceivedData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, measured_),
  };
  ReceivedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceivedData_descriptor_,
      ReceivedData::default_instance_,
      ReceivedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceivedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceivedData));
  RobotPose_descriptor_ = file->message_type(2);
  static const int RobotPose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, theta_),
  };
  RobotPose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPose_descriptor_,
      RobotPose::default_instance_,
      RobotPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPose));
  SystemData_descriptor_ = file->message_type(3);
  static const int SystemData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, timems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, vision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, pose_),
  };
  SystemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemData_descriptor_,
      SystemData::default_instance_,
      SystemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemData));
  LoggingData_descriptor_ = file->message_type(4);
  static const int LoggingData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingData, sysdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingData, recvdata_),
  };
  LoggingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoggingData_descriptor_,
      LoggingData::default_instance_,
      LoggingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoggingData));
  Log_descriptor_ = file->message_type(5);
  static const int Log_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, data_),
  };
  Log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Log_descriptor_,
      Log::default_instance_,
      Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Log));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logging_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Velocities_descriptor_, &Velocities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceivedData_descriptor_, &ReceivedData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPose_descriptor_, &RobotPose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemData_descriptor_, &SystemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoggingData_descriptor_, &LoggingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Log_descriptor_, &Log::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logging_2eproto() {
  delete Velocities::default_instance_;
  delete Velocities_reflection_;
  delete ReceivedData::default_instance_;
  delete ReceivedData_reflection_;
  delete RobotPose::default_instance_;
  delete RobotPose_reflection_;
  delete SystemData::default_instance_;
  delete SystemData_reflection_;
  delete LoggingData::default_instance_;
  delete LoggingData_reflection_;
  delete Log::default_instance_;
  delete Log_reflection_;
}

void protobuf_AddDesc_logging_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlogging.proto\022\007Logging\"$\n\nVelocities\022\n"
    "\n\002vl\030\001 \002(\005\022\n\n\002vr\030\002 \002(\005\"r\n\014ReceivedData\022\n"
    "\n\002id\030\001 \002(\005\022\n\n\002ts\030\002 \002(\005\022#\n\006target\030\003 \002(\0132\023"
    ".Logging.Velocities\022%\n\010measured\030\004 \002(\0132\023."
    "Logging.Velocities\"0\n\tRobotPose\022\t\n\001x\030\001 \002"
    "(\005\022\t\n\001y\030\002 \002(\005\022\r\n\005theta\030\003 \002(\002\"\236\001\n\nSystemD"
    "ata\022\n\n\002id\030\001 \002(\005\022\n\n\002ts\030\002 \002(\005\022\016\n\006timeMs\030\003 "
    "\002(\002\022!\n\004sent\030\004 \002(\0132\023.Logging.Velocities\022#"
    "\n\006vision\030\005 \002(\0132\023.Logging.Velocities\022 \n\004p"
    "ose\030\006 \002(\0132\022.Logging.RobotPose\"\\\n\013Logging"
    "Data\022$\n\007sysData\030\001 \002(\0132\023.Logging.SystemDa"
    "ta\022\'\n\010recvData\030\002 \001(\0132\025.Logging.ReceivedD"
    "ata\")\n\003Log\022\"\n\004data\030\001 \003(\0132\024.Logging.Loggi"
    "ngData", 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logging.proto", &protobuf_RegisterTypes);
  Velocities::default_instance_ = new Velocities();
  ReceivedData::default_instance_ = new ReceivedData();
  RobotPose::default_instance_ = new RobotPose();
  SystemData::default_instance_ = new SystemData();
  LoggingData::default_instance_ = new LoggingData();
  Log::default_instance_ = new Log();
  Velocities::default_instance_->InitAsDefaultInstance();
  ReceivedData::default_instance_->InitAsDefaultInstance();
  RobotPose::default_instance_->InitAsDefaultInstance();
  SystemData::default_instance_->InitAsDefaultInstance();
  LoggingData::default_instance_->InitAsDefaultInstance();
  Log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logging_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logging_2eproto {
  StaticDescriptorInitializer_logging_2eproto() {
    protobuf_AddDesc_logging_2eproto();
  }
} static_descriptor_initializer_logging_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Velocities::kVlFieldNumber;
const int Velocities::kVrFieldNumber;
#endif  // !_MSC_VER

Velocities::Velocities()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Velocities::InitAsDefaultInstance() {
}

Velocities::Velocities(const Velocities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Velocities::SharedCtor() {
  _cached_size_ = 0;
  vl_ = 0;
  vr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Velocities::~Velocities() {
  SharedDtor();
}

void Velocities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Velocities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Velocities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Velocities_descriptor_;
}

const Velocities& Velocities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

Velocities* Velocities::default_instance_ = NULL;

Velocities* Velocities::New() const {
  return new Velocities;
}

void Velocities::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vl_ = 0;
    vr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Velocities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vl_)));
          set_has_vl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vr;
        break;
      }
      
      // required int32 vr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vr_)));
          set_has_vr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Velocities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vl = 1;
  if (has_vl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vl(), output);
  }
  
  // required int32 vr = 2;
  if (has_vr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Velocities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vl = 1;
  if (has_vl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vl(), target);
  }
  
  // required int32 vr = 2;
  if (has_vr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Velocities::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vl = 1;
    if (has_vl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vl());
    }
    
    // required int32 vr = 2;
    if (has_vr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Velocities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Velocities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Velocities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Velocities::MergeFrom(const Velocities& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vl()) {
      set_vl(from.vl());
    }
    if (from.has_vr()) {
      set_vr(from.vr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Velocities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocities::CopyFrom(const Velocities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocities::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Velocities::Swap(Velocities* other) {
  if (other != this) {
    std::swap(vl_, other->vl_);
    std::swap(vr_, other->vr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Velocities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Velocities_descriptor_;
  metadata.reflection = Velocities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceivedData::kIdFieldNumber;
const int ReceivedData::kTsFieldNumber;
const int ReceivedData::kTargetFieldNumber;
const int ReceivedData::kMeasuredFieldNumber;
#endif  // !_MSC_VER

ReceivedData::ReceivedData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceivedData::InitAsDefaultInstance() {
  target_ = const_cast< ::Logging::Velocities*>(&::Logging::Velocities::default_instance());
  measured_ = const_cast< ::Logging::Velocities*>(&::Logging::Velocities::default_instance());
}

ReceivedData::ReceivedData(const ReceivedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceivedData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ts_ = 0;
  target_ = NULL;
  measured_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceivedData::~ReceivedData() {
  SharedDtor();
}

void ReceivedData::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
    delete measured_;
  }
}

void ReceivedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceivedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceivedData_descriptor_;
}

const ReceivedData& ReceivedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

ReceivedData* ReceivedData::default_instance_ = NULL;

ReceivedData* ReceivedData::New() const {
  return new ReceivedData;
}

void ReceivedData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ts_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::Logging::Velocities::Clear();
    }
    if (has_measured()) {
      if (measured_ != NULL) measured_->::Logging::Velocities::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceivedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required int32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // required .Logging.Velocities target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_measured;
        break;
      }
      
      // required .Logging.Velocities measured = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measured:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measured()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceivedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ts(), output);
  }
  
  // required .Logging.Velocities target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target(), output);
  }
  
  // required .Logging.Velocities measured = 4;
  if (has_measured()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->measured(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceivedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ts(), target);
  }
  
  // required .Logging.Velocities target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  // required .Logging.Velocities measured = 4;
  if (has_measured()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->measured(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceivedData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }
    
    // required .Logging.Velocities target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // required .Logging.Velocities measured = 4;
    if (has_measured()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measured());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceivedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceivedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceivedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceivedData::MergeFrom(const ReceivedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_target()) {
      mutable_target()->::Logging::Velocities::MergeFrom(from.target());
    }
    if (from.has_measured()) {
      mutable_measured()->::Logging::Velocities::MergeFrom(from.measured());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceivedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedData::CopyFrom(const ReceivedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_measured()) {
    if (!this->measured().IsInitialized()) return false;
  }
  return true;
}

void ReceivedData::Swap(ReceivedData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(target_, other->target_);
    std::swap(measured_, other->measured_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceivedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceivedData_descriptor_;
  metadata.reflection = ReceivedData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotPose::kXFieldNumber;
const int RobotPose::kYFieldNumber;
const int RobotPose::kThetaFieldNumber;
#endif  // !_MSC_VER

RobotPose::RobotPose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPose::InitAsDefaultInstance() {
}

RobotPose::RobotPose(const RobotPose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPose::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  theta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPose::~RobotPose() {
  SharedDtor();
}

void RobotPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPose_descriptor_;
}

const RobotPose& RobotPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

RobotPose* RobotPose::default_instance_ = NULL;

RobotPose* RobotPose::New() const {
  return new RobotPose;
}

void RobotPose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    theta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_theta;
        break;
      }
      
      // required float theta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // required float theta = 3;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->theta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // required float theta = 3;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->theta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // required float theta = 3;
    if (has_theta()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotPose::MergeFrom(const RobotPose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotPose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPose::CopyFrom(const RobotPose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RobotPose::Swap(RobotPose* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(theta_, other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPose_descriptor_;
  metadata.reflection = RobotPose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemData::kIdFieldNumber;
const int SystemData::kTsFieldNumber;
const int SystemData::kTimeMsFieldNumber;
const int SystemData::kSentFieldNumber;
const int SystemData::kVisionFieldNumber;
const int SystemData::kPoseFieldNumber;
#endif  // !_MSC_VER

SystemData::SystemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemData::InitAsDefaultInstance() {
  sent_ = const_cast< ::Logging::Velocities*>(&::Logging::Velocities::default_instance());
  vision_ = const_cast< ::Logging::Velocities*>(&::Logging::Velocities::default_instance());
  pose_ = const_cast< ::Logging::RobotPose*>(&::Logging::RobotPose::default_instance());
}

SystemData::SystemData(const SystemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ts_ = 0;
  timems_ = 0;
  sent_ = NULL;
  vision_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemData::~SystemData() {
  SharedDtor();
}

void SystemData::SharedDtor() {
  if (this != default_instance_) {
    delete sent_;
    delete vision_;
    delete pose_;
  }
}

void SystemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemData_descriptor_;
}

const SystemData& SystemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

SystemData* SystemData::default_instance_ = NULL;

SystemData* SystemData::New() const {
  return new SystemData;
}

void SystemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ts_ = 0;
    timems_ = 0;
    if (has_sent()) {
      if (sent_ != NULL) sent_->::Logging::Velocities::Clear();
    }
    if (has_vision()) {
      if (vision_ != NULL) vision_->::Logging::Velocities::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::Logging::RobotPose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required int32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_timeMs;
        break;
      }
      
      // required float timeMs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timeMs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timems_)));
          set_has_timems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sent;
        break;
      }
      
      // required .Logging.Velocities sent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vision;
        break;
      }
      
      // required .Logging.Velocities vision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pose;
        break;
      }
      
      // required .Logging.RobotPose pose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ts(), output);
  }
  
  // required float timeMs = 3;
  if (has_timems()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->timems(), output);
  }
  
  // required .Logging.Velocities sent = 4;
  if (has_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sent(), output);
  }
  
  // required .Logging.Velocities vision = 5;
  if (has_vision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vision(), output);
  }
  
  // required .Logging.RobotPose pose = 6;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ts(), target);
  }
  
  // required float timeMs = 3;
  if (has_timems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->timems(), target);
  }
  
  // required .Logging.Velocities sent = 4;
  if (has_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sent(), target);
  }
  
  // required .Logging.Velocities vision = 5;
  if (has_vision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vision(), target);
  }
  
  // required .Logging.RobotPose pose = 6;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }
    
    // required float timeMs = 3;
    if (has_timems()) {
      total_size += 1 + 4;
    }
    
    // required .Logging.Velocities sent = 4;
    if (has_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sent());
    }
    
    // required .Logging.Velocities vision = 5;
    if (has_vision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vision());
    }
    
    // required .Logging.RobotPose pose = 6;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemData::MergeFrom(const SystemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_timems()) {
      set_timems(from.timems());
    }
    if (from.has_sent()) {
      mutable_sent()->::Logging::Velocities::MergeFrom(from.sent());
    }
    if (from.has_vision()) {
      mutable_vision()->::Logging::Velocities::MergeFrom(from.vision());
    }
    if (from.has_pose()) {
      mutable_pose()->::Logging::RobotPose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemData::CopyFrom(const SystemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_sent()) {
    if (!this->sent().IsInitialized()) return false;
  }
  if (has_vision()) {
    if (!this->vision().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void SystemData::Swap(SystemData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(timems_, other->timems_);
    std::swap(sent_, other->sent_);
    std::swap(vision_, other->vision_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemData_descriptor_;
  metadata.reflection = SystemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoggingData::kSysDataFieldNumber;
const int LoggingData::kRecvDataFieldNumber;
#endif  // !_MSC_VER

LoggingData::LoggingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoggingData::InitAsDefaultInstance() {
  sysdata_ = const_cast< ::Logging::SystemData*>(&::Logging::SystemData::default_instance());
  recvdata_ = const_cast< ::Logging::ReceivedData*>(&::Logging::ReceivedData::default_instance());
}

LoggingData::LoggingData(const LoggingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoggingData::SharedCtor() {
  _cached_size_ = 0;
  sysdata_ = NULL;
  recvdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoggingData::~LoggingData() {
  SharedDtor();
}

void LoggingData::SharedDtor() {
  if (this != default_instance_) {
    delete sysdata_;
    delete recvdata_;
  }
}

void LoggingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggingData_descriptor_;
}

const LoggingData& LoggingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

LoggingData* LoggingData::default_instance_ = NULL;

LoggingData* LoggingData::New() const {
  return new LoggingData;
}

void LoggingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sysdata()) {
      if (sysdata_ != NULL) sysdata_->::Logging::SystemData::Clear();
    }
    if (has_recvdata()) {
      if (recvdata_ != NULL) recvdata_->::Logging::ReceivedData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoggingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Logging.SystemData sysData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sysdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recvData;
        break;
      }
      
      // optional .Logging.ReceivedData recvData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoggingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Logging.SystemData sysData = 1;
  if (has_sysdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sysdata(), output);
  }
  
  // optional .Logging.ReceivedData recvData = 2;
  if (has_recvdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recvdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoggingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Logging.SystemData sysData = 1;
  if (has_sysdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sysdata(), target);
  }
  
  // optional .Logging.ReceivedData recvData = 2;
  if (has_recvdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recvdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoggingData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Logging.SystemData sysData = 1;
    if (has_sysdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sysdata());
    }
    
    // optional .Logging.ReceivedData recvData = 2;
    if (has_recvdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoggingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoggingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoggingData::MergeFrom(const LoggingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysdata()) {
      mutable_sysdata()->::Logging::SystemData::MergeFrom(from.sysdata());
    }
    if (from.has_recvdata()) {
      mutable_recvdata()->::Logging::ReceivedData::MergeFrom(from.recvdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoggingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingData::CopyFrom(const LoggingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_sysdata()) {
    if (!this->sysdata().IsInitialized()) return false;
  }
  if (has_recvdata()) {
    if (!this->recvdata().IsInitialized()) return false;
  }
  return true;
}

void LoggingData::Swap(LoggingData* other) {
  if (other != this) {
    std::swap(sysdata_, other->sysdata_);
    std::swap(recvdata_, other->recvdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoggingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggingData_descriptor_;
  metadata.reflection = LoggingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Log::kDataFieldNumber;
#endif  // !_MSC_VER

Log::Log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Log::InitAsDefaultInstance() {
}

Log::Log(const Log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Log::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Log::~Log() {
  SharedDtor();
}

void Log::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Log_descriptor_;
}

const Log& Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logging_2eproto();  return *default_instance_;
}

Log* Log::default_instance_ = NULL;

Log* Log::New() const {
  return new Log;
}

void Log::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Logging.LoggingData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Logging.LoggingData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Logging.LoggingData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Log::ByteSize() const {
  int total_size = 0;
  
  // repeated .Logging.LoggingData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void Log::Swap(Log* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Log_descriptor_;
  metadata.reflection = Log_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Logging

// @@protoc_insertion_point(global_scope)
